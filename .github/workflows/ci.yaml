name: CI

on:
  push:
    branches: 
      - main
  workflow_dispatch:

jobs:

  provision-runtime-group:
  
    runs-on: ubuntu-22.04
    name: Provision New Runtime Groups

    steps:
    
    - name: Checkout
      uses: actions/checkout@v3
      
    - name: Install decK tool
      run: |
        curl -sL https://github.com/kong/deck/releases/download/v1.19.1/deck_1.19.1_linux_amd64.tar.gz -o deck.tar.gz
        tar -xf deck.tar.gz -C /tmp
        sudo cp /tmp/deck /usr/local/bin/

    - name: Set Variables
      run: |
        echo "REGION=$(yq .region ./config.yaml)" >> $GITHUB_ENV
        echo "RG_DEV_NAME=$(yq .runtimeGroupDev.name ./config.yaml)" >> $GITHUB_ENV
        echo "RG_DEV_CERT=$(yq .runtimeGroupDev.cert ./config.yaml)" >> $GITHUB_ENV
        echo "RG_DEV_DESCRIPTION=$(yq .runtimeGroupDev.description ./config.yaml)" >> $GITHUB_ENV
        echo "RG_PROD_NAME=$(yq .runtimeGroupProd.name ./config.yaml)" >> $GITHUB_ENV
        echo "RG_PROD_CERT=$(yq .runtimeGroupProd.cert ./config.yaml)" >> $GITHUB_ENV
        echo "RG_PROD_DESCRIPTION=$(yq .runtimeGroupProd.description ./config.yaml)" >> $GITHUB_ENV
        echo "TEAM_NAME=$(yq .team.name ./config.yaml)" >> $GITHUB_ENV
        echo "TEAM_DESCRIPTION=$(yq .team.description ./config.yaml)" >> $GITHUB_ENV
        echo "TEAM_IDP_GROUP_NAME=$(yq .team.idpGroupName ./config.yaml)" >> $GITHUB_ENV

    - name: Print Variables
      run: |
        echo REGION: $REGION
        echo RUNTIME GROUP DEV NAME: $RG_DEV_NAME
        echo RUNTIME GROUP DEV CERT: $RG_DEV_CERT
        echo RUNTIME GROUP DEV DESCRIPTION: $RG_DEV_DESCRIPTION
        echo RUNTIME GROUP PROD NAME: $RG_PROD_NAME
        echo RUNTIME GROUP PROD CERT: $RG_PROD_CERT
        echo RUNTIME GROUP PROD DESCRIPTION: $RG_PROD_DESCRIPTION
        echo TEAM NAME: $TEAM_NAME
        echo TEAM DESCRIPTION: $TEAM_DESCRIPTION
        echo IDP GROUP NAME: $TEAM_IDP_GROUP_NAME

    - name: Create Dev Runtime Group
      id: create-rg-dev
      run: |
        echo "DEV_RUNTIME_GROUP_ID=$(curl -X POST "https://${{ env.REGION }}.api.konghq.com/v2/runtime-groups" \
          --header "Authorization: Bearer ${{ secrets.KONNECT_TOKEN }}" \
          --header 'Content-Type: application/json' \
          --header 'accept: application/json' \
          --data '{
            "name": "${{ env.RG_DEV_NAME }}",
            "description": "${{ env.RG_DEV_DESCRIPTION }}",
            "labels": {
              "env": "dev",
              "type":"k8s",
              "team":"${{ env.TEAM_NAME }}"
            }
          }' | jq -r '.id')" >> "$GITHUB_OUTPUT"

    - name: Create Prod Runtime Group
      id: create-rg-prod
      run: |
        echo "PROD_RUNTIME_GROUP_ID=$(curl -X POST "https://${{ env.REGION }}.api.konghq.com/v2/runtime-groups" \
          --header "Authorization: Bearer ${{ secrets.KONNECT_TOKEN }}" \
          --header 'Content-Type: application/json' \
          --header 'accept: application/json' \
          --data '{
            "name": "${{ env.RG_PROD_NAME }}",
            "description": "${{ env.RG_PROD_DESCRIPTION }}",
            "labels": {
              "env": "prod",
              "type":"k8s",
              "team":"${{ env.TEAM_NAME }}"
            }
          }' | jq -r '.id')" >> "$GITHUB_OUTPUT"

    - name: Upload Certificate Dev
      id: upload-cert-dev
      run: |
        curl -X POST "https://${{ env.REGION }}.api.konghq.com/v2/runtime-groups/${{ steps.create-rg-dev.outputs.DEV_RUNTIME_GROUP_ID }}/dp-client-certificates" \
          --header "Authorization: Bearer ${{ secrets.KONNECT_TOKEN }}" \
          --header 'Content-Type: application/json' \
          --data '{
            "cert": "${{ env.RG_DEV_CERT }}"
          }'

    - name: Upload Certificate Prod
      id: upload-cert-prod
      run: |
        curl -X POST "https://${{ env.REGION }}.api.konghq.com/v2/runtime-groups/${{ steps.create-rg-prod.outputs.PROD_RUNTIME_GROUP_ID }}/dp-client-certificates" \
          --header "Authorization: Bearer ${{ secrets.KONNECT_TOKEN }}" \
          --header 'Content-Type: application/json' \
          --data '{
            "cert": "${{ env.RG_PROD_CERT }}"
          }'

    - name: Apply Global Plugins to Dev
      run: |
        git clone https://github.com/macdonald-kong/global-plugins
        cd global-plugins
        deck sync \
          --state kong.yaml,./plugins \
          --konnect-addr https://${{ env.REGION }}.api.konghq.com \
          --konnect-token ${{ secrets.KONNECT_TOKEN }} \
          --konnect-runtime-group-name ${{ env.RG_DEV_NAME }}

    - name: Apply Global Plugins to Prod
      run: |
        cd global-plugins
        deck sync \
          --state kong.yaml,./plugins \
          --konnect-addr https://${{ env.REGION }}.api.konghq.com \
          --konnect-token ${{ secrets.KONNECT_TOKEN }} \
          --konnect-runtime-group-name ${{ env.RG_PROD_NAME }}

    - name: Create Team
      id: create-team
      run: |
        echo "TEAM_ID=$(curl -X POST https://global.api.konghq.com/v2/teams \
          --header 'Content-Type: application/json' \
          --header 'accept: application/json' \
          --header "Authorization: Bearer ${{ secrets.KONNECT_TOKEN }}" \
          --data '{
            "name":"${{ env.TEAM_NAME }}",
            "description":"${{ env.TEAM_DESCRIPTION }}"
          }' | jq -r '.id')" >> "$GITHUB_OUTPUT"

    - name: Map Team
      id: map-team
      run: |
        curl --request GET \
          --url https://global.api.konghq.com/v2/identity-provider/team-mappings \
          --header "Authorization: Bearer ${{ secrets.KONNECT_TOKEN }}" \
          --header 'accept: application/json' | jq -r .data  > team_mapping_resp.json

        jq '{"mappings": .}' team_mapping_resp.json > orig_team_mapping.json

        jq '.mappings += [{
          "group": "${{ env.TEAM_IDP_GROUP_NAME }}",
          "team_ids": [
            "${{ steps.create-team.outputs.TEAM_ID }}"
          ]
        }]' orig_team_mapping.json > team_mapping_req.json
      
        curl -X PUT https://global.api.konghq.com/v2/identity-provider/team-mappings \
          --header 'Content-Type: application/json' -H 'accept: application/json' \
          --header "Authorization: Bearer ${{ secrets.KONNECT_TOKEN }}" \
          --data @team_mapping_req.json

    - name: Assign Roles Dev
      id: assign-roles-dev
      run: |
        curl -X POST https://global.api.konghq.com/v2/teams/${{ steps.create-team.outputs.TEAM_ID }}/assigned-roles \
          --header 'Content-Type: application/json' \
          --header 'accept: application/json' \
          --header "Authorization: Bearer ${{ secrets.KONNECT_TOKEN }}" \
          --data '{
            "role_name":"Admin",
            "entity_id":"${{ steps.create-rg-dev.outputs.DEV_RUNTIME_GROUP_ID }}",
            "entity_type_name":"Runtime Groups",
            "entity_region":"${{ env.REGION }}"
          }'

    - name: Assign Roles Prod
      id: assign-roles-prod
      run: |
        curl -X POST https://global.api.konghq.com/v2/teams/${{ steps.create-team.outputs.TEAM_ID }}/assigned-roles \
          --header 'Content-Type: application/json' \
          --header 'accept: application/json' \
          --header "Authorization: Bearer ${{ secrets.KONNECT_TOKEN }}" \
          --data '{
            "role_name":"Viewer",
            "entity_id":"${{ steps.create-rg-prod.outputs.PROD_RUNTIME_GROUP_ID }}",
            "entity_type_name":"Runtime Groups",
            "entity_region":"${{ env.REGION }}"
          }'