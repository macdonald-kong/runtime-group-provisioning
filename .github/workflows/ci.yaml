name: CI

on:
  push:
    branches: 
      - main
  workflow_dispatch:

jobs:

  provision-runtime-group:
  
    runs-on: ubuntu-22.04
    name: Provision New Runtime Groups

    steps:
    
    - name: Checkout
      uses: actions/checkout@v3
      
    - name: Install decK tool
      run: |
        curl -sL https://github.com/kong/deck/releases/download/v1.19.1/deck_1.19.1_linux_amd64.tar.gz -o deck.tar.gz
        tar -xf deck.tar.gz -C /tmp
        sudo cp /tmp/deck /usr/local/bin/

    - name: Create Dev Runtime Group
      id: create-rg-dev
      run: |
        echo "DEV_RUNTIME_GROUP_ID=$(curl -X POST https://${{ vars.KONNECT_REGION }}.api.konghq.com/v2/runtime-groups \
          --header "Authorization: Bearer ${{ secrets.KONNECT_TOKEN }}" \
          --header 'Content-Type: application/json' \
          --header 'accept: application/json' \
          --data '{
            "name": "${{ vars.RUNTIME_GROUP_NAME }}-dev",
            "description": "${{ vars.RUNTIME_GROUP_DESCRIPTION }}",
            "labels": {
              "env": "dev",
              "type":"k8s",
              "team":"bu1"
            }
          }' | jq -r '.id')" >> "$GITHUB_OUTPUT"

    - name: Create Prod Runtime Group
      id: create-rg-prod
      run: |
        echo "PROD_RUNTIME_GROUP_ID=$(curl -X POST https://${{ vars.KONNECT_REGION }}.api.konghq.com/v2/runtime-groups \
          --header "Authorization:Bearer ${{ secrets.KONNECT_TOKEN }}" \
          --header 'Content-Type: application/json' \
          --header 'accept: application/json' \
          --data '{
            "name": "${{ vars.RUNTIME_GROUP_NAME }}-prod",
            "description": "${{ vars.RUNTIME_GROUP_DESCRIPTION }}",
            "labels": {
              "env": "prod",
              "type":"k8s",
              "team":"bu1"
            }
          }' | jq -r '.id')" >> "$GITHUB_OUTPUT"

    - name: Upload Certificate Dev
      id: upload-cert-dev
      run: |
        curl -X POST https://${{ vars.KONNECT_REGION }}.api.konghq.com/v2/runtime-groups/${{ steps.create-rg-dev.outputs.DEV_RUNTIME_GROUP_ID }}/dp-client-certificates \
          --header "Authorization: Bearer ${{ secrets.KONNECT_TOKEN }}" \
          --header 'Content-Type: application/json' \
          --data '{
            "cert": "${{ vars.RUNTIME_GROUP_CERT }}"
          }'

    - name: Upload Certificate Prod
      id: upload-cert-prod
      run: |
        curl -X POST https://${{ vars.KONNECT_REGION }}.api.konghq.com/v2/runtime-groups/${{ steps.create-rg-prod.outputs.PROD_RUNTIME_GROUP_ID }}/dp-client-certificates \
          --header "Authorization: Bearer ${{ secrets.KONNECT_TOKEN }}" \
          --header 'Content-Type: application/json' \
          --data '{
            "cert": "${{ vars.RUNTIME_GROUP_CERT }}"
          }'

    - name: Apply Global Plugins to Dev
      run: |
        git clone https://github.com/macdonald-kong/global-plugins
        cd global-plugins
        deck sync \
          --state kong.yaml,./plugins \
          --konnect-addr https://${{ vars.KONNECT_REGION }}.api.konghq.com \
          --konnect-token ${{ secrets.KONNECT_TOKEN }} \
          --konnect-runtime-group-name ${{ vars.RUNTIME_GROUP_NAME }}-dev

    - name: Apply Global Plugins to Prod
      run: |
        deck sync 
          --state kong.yaml,./plugins \
          --konnect-addr https://${{ vars.KONNECT_REGION }}.api.konghq.com \
          --konnect-token ${{ secrets.KONNECT_TOKEN }} \
          --konnect-runtime-group-name ${{ vars.RUNTIME_GROUP_NAME }}-prod

    - name: Create Team
      id: create-team
      run: |
        echo "TEAM_ID=$(curl -X POST https://global.api.konghq.com/v2/teams \
          --header 'Content-Type: application/json' \
          --header 'accept: application/json' \
          --header "Authorization: Bearer ${{ secrets.KONNECT_TOKEN }}" \
          --data '{
            "name":"${{ vars.TEAM_NAME }}",
            "description":"${{ vars.TEAM_DESCRIPTION }}"
          }' | jq -r '.id')" >> "$GITHUB_OUTPUT"

    - name: Map Team
      id: map-team
      run: |
        curl --request GET \
          --url https://global.api.konghq.com/v2/identity-provider/team-mappings \
          --header "Authorization: Bearer ${{ secrets.KONNECT_TOKEN }}" \
          --header 'accept: application/json' | jq -r .data  > original_team_mapping.json

        echo '{"mappings": []}' > team_mapping_template.json

        jq --argjson team_mapping "$(<original_team_mapping.json)" '.mappings += [$team_mapping]' team_mapping_template.json > new_team_mapping.json

        jq '.mappings[.mappings| length] |= . + {"group": "${{ vars.TEAM_NAME_IDP }}","team_ids": ["${{ steps.create-team.outputs.TEAM_ID }}"]}' new_team_mapping.json > team_mapping_req.json

        curl -X PUT https://global.api.konghq.com/v2/identity-provider/team-mappings \
        --header 'Content-Type: application/json' -H 'accept: application/json' \
        --header "Authorization: Bearer ${{ secrets.KONNECT_TOKEN }}" \
        --data @team_mapping_req.json

    - name: Assign Roles Dev
      id: assign-roles-dev
      run: |
        curl -X POST https://global.api.konghq.com/v2/teams/${{ steps.create-team.outputs.TEAM_ID }}/assigned-roles \
        --header 'Content-Type: application/json' \ 
        --header 'accept: application/json' \
        --header  "Authorization: Bearer ${{ secrets.KONNECT_TOKEN }}" \
        --data '{
          "role_name":"Admin",
          "entity_id":"${{ steps.create-rg-dev.outputs.DEV_RUNTIME_GROUP_ID }}",
          "entity_type_name":"Runtime Groups",
          "entity_region":"${{ vars.KONNECT_REGION }}"}'
        }'

    - name: Assign Roles Prod
      id: assign-roles-prod
      run: |
        curl -X POST https://global.api.konghq.com/v2/teams/${{ steps.create-team.outputs.TEAM_ID }}/assigned-roles \
        --header 'Content-Type: application/json' \
        --header 'accept: application/json' \
        --header "Authorization: Bearer ${{ secrets.KONNECT_TOKEN }}" \
        --data '{
          "role_name":"Viewer",
          "entity_id":"${{ steps.create-rg-prod.outputs.PROD_RUNTIME_GROUP_ID }}",
          "entity_type_name":"Runtime Groups",
          "entity_region":"${{ vars.KONNECT_REGION }}"
        }'